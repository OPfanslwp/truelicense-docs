(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{374:function(e,n,t){"use strict";t.r(n);var s=t(44),a=Object(s.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"using-the-wsi"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#using-the-wsi"}},[e._v("#")]),e._v(" Using The WSI")]),e._v(" "),t("p",[e._v("The Key Manager Service module in your generated project implements a Web Service Interface (WSI) for license key\nmanagement on the consumer side.")]),e._v(" "),t("h2",{attrs:{id:"starting-the-wsi"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#starting-the-wsi"}},[e._v("#")]),e._v(" Starting The WSI")]),e._v(" "),t("p",[e._v("The Key Manager Service module is designed to be embedded in a WAR file which gets deployed to a Servlet container like\n"),t("a",{attrs:{href:"https://tomcat.apache.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("Apache Tomcat"),t("OutboundLink")],1),e._v(".\nTherefore, this module does not provide a standalone JAR.\nFor testing purposes, there is a main class which runs a simple HTTP server with the embedded WSI.\nYou can start it using the following command:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("JAVA_HOME")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("/usr/libexec/java_home -v "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.8")]),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# on macOS only")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("chmod")]),e._v(" +x mvnw\n./mvnw clean verify\njava -jar keymgr-service/target/*-keymgr-service-*-standalone.jar\n")])])]),t("h2",{attrs:{id:"installing-a-license-key"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#installing-a-license-key"}},[e._v("#")]),e._v(" Installing A License Key")]),e._v(" "),t("p",[e._v("Once the server is running, you can install the license key which you have generated when\n"),t("RouterLink",{attrs:{to:"/guide/using-the-cli.html"}},[e._v("using the CLI")]),e._v(" like this:")],1),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ curl -v localhost:9998/license --data-binary @product.lic -H 'Content-Type: application/octet-stream'\n*   Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 9998 (#0)\n> POST /license HTTP/1.1\n> Host: localhost:9998\n> User-Agent: curl/7.64.1\n> Accept: */*\n> Content-Type: application/octet-stream\n> Content-Length: 349\n> \n* upload completely sent off: 349 out of 349 bytes\n< HTTP/1.1 303 See Other\n< Location: http://localhost:9998/license\n< Content-Length: 0\n< \n* Connection #0 to host localhost left intact\n* Closing connection 0\n")])])]),t("p",[e._v("Note that "),t("code",[e._v("@product.lic")]),e._v(" references the license key file which has been previously generated.")]),e._v(" "),t("p",[e._v("The server responds with the status code 303 and a new location to indicate that the operation succeeded and that the\nclient can now load the license key at the specified location.")]),e._v(" "),t("h2",{attrs:{id:"loading-the-license-key"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#loading-the-license-key"}},[e._v("#")]),e._v(" Loading The License Key")]),e._v(" "),t("p",[e._v("You can load the installed license key using:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('$ curl -v localhost:9998/license\n*   Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 9998 (#0)\n> GET /license HTTP/1.1\n> Host: localhost:9998\n> User-Agent: curl/7.64.1\n> Accept: */*\n> \n< HTTP/1.1 200 OK\n< Content-Type: application/json\n< Content-Length: 153\n< \n* Connection #0 to host localhost left intact\n{"license":{"consumerAmount":1,"consumerType":"User","holder":"CN=Unknown","issued":1590520369673,"issuer":"CN=Company Inc.","subject":"StarGazer 2020"}}* Closing connection 0\n')])])]),t("p",[e._v("The server responds with the status code 200 and a JSON encoding of the license bean which is encoded in the installed\nlicense key.")]),e._v(" "),t("p",[e._v("If no license key is installed, then the server responds with the status code 404 and an exception message:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('$ curl -v localhost:9998/license\n*   Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 9998 (#0)\n> GET /license HTTP/1.1\n> Host: localhost:9998\n> User-Agent: curl/7.64.1\n> Accept: */*\n> \n< HTTP/1.1 404 Not Found\n< Content-Type: text/plain\n< Content-Length: 168\n< \n* Connection #0 to host localhost left intact\nglobal.namespace.fun.io.api.NoContentException: Cannot locate the key "StarGazer 2020" in the user preferences node for the absolute path "/com/company/product/keymgr".* Closing connection 0\n')])])]),t("h2",{attrs:{id:"verifying-the-license-key"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#verifying-the-license-key"}},[e._v("#")]),e._v(" Verifying The License Key")]),e._v(" "),t("p",[e._v("You can verify the installed license key using:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('$ curl -v localhost:9998/license?verify=true\n*   Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 9998 (#0)\n> GET /license?verify=true HTTP/1.1\n> Host: localhost:9998\n> User-Agent: curl/7.64.1\n> Accept: */*\n> \n< HTTP/1.1 200 OK\n< Content-Type: application/json\n< Content-Length: 153\n< \n* Connection #0 to host localhost left intact\n{"license":{"consumerAmount":1,"consumerType":"User","holder":"CN=Unknown","issued":1590520369673,"issuer":"CN=Company Inc.","subject":"StarGazer 2020"}}* Closing connection 0\n')])])]),t("p",[e._v("The server responds with the status code 200 and a JSON encoding of the license bean which is encoded in the installed\nlicense key.")]),e._v(" "),t("p",[e._v("If no license key is installed, then the server responds with the status code 404 and an exception message:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('$ curl -v localhost:9998/license?verify=true\n*   Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 9998 (#0)\n> GET /license?verify=true HTTP/1.1\n> Host: localhost:9998\n> User-Agent: curl/7.64.1\n> Accept: */*\n> \n< HTTP/1.1 404 Not Found\n< Content-Type: text/plain\n< Content-Length: 168\n< \n* Connection #0 to host localhost left intact\nglobal.namespace.fun.io.api.NoContentException: Cannot locate the key "StarGazer 2020" in the user preferences node for the absolute path "/com/company/product/keymgr".* Closing connection 0\n')])])]),t("p",[e._v("If a license key is installed, but the encoded license bean is invalid, then the server responds with the status code\n402 and an exception message:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ curl -v localhost:9998/license?verify=true\n*   Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 9998 (#0)\n> GET /license?verify=true HTTP/1.1\n> Host: localhost:9998\n> User-Agent: curl/7.64.1\n> Accept: */*\n> \n< HTTP/1.1 402 Payment Required\n< Content-Type: text/plain\n< Content-Length: 100\n< \n* Connection #0 to host localhost left intact\nLicense validity period has expired at Wednesday, 20 May 2020 21:36:12 Central European Summer Time.* Closing connection 0\n")])])]),t("h2",{attrs:{id:"uninstalling-the-license-key"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#uninstalling-the-license-key"}},[e._v("#")]),e._v(" Uninstalling The License Key")]),e._v(" "),t("p",[e._v("You can uninstall the license key using:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ curl -v localhost:9998/license -X DELETE\n*   Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 9998 (#0)\n> DELETE /license HTTP/1.1\n> Host: localhost:9998\n> User-Agent: curl/7.64.1\n> Accept: */*\n> \n< HTTP/1.1 204 No Content\n< \n* Connection #0 to host localhost left intact\n* Closing connection 0\n")])])]),t("p",[e._v("The server responds with the status code 204 to indicate that the operation succeeded with an empty response entity.")]),e._v(" "),t("p",[e._v("If no license key is installed or only an auto-generated FTP license key is installed, then the server responds with the\nstatus code 404 and an exception message:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('$ curl -v localhost:9998/license -X DELETE\n*   Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 9998 (#0)\n> DELETE /license HTTP/1.1\n> Host: localhost:9998\n> User-Agent: curl/7.64.1\n> Accept: */*\n> \n< HTTP/1.1 404 Not Found\n< Content-Type: text/plain\n< Content-Length: 168\n< \n* Connection #0 to host localhost left intact\nglobal.namespace.fun.io.api.NoContentException: Cannot locate the key "StarGazer 2020" in the user preferences node for the absolute path "/com/company/product/keymgr".* Closing connection 0\n')])])])])}),[],!1,null,null,null);n.default=a.exports}}]);